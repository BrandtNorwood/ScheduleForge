/* 
    Bygone Backend 
        a basic web service backend library
    
    by Niko Norwood 07/04/2024

*/

const debugMode = true;
var logMode = false;

var fs = require("fs");

//get formatted datetime (stole this from Hangerlog)
export function getTime(){
    const now = new Date(Date.now());
    const formattedDateTime = now.toISOString().slice(0, 19).replace('T', ' ');  
    return formattedDateTime;
}  


//This pair of functions is an easy way to cleanup and standardize output
export function serverOutput(message) {
    console.log(getTime() + "> " + message);
    if (logMode){logger.log(getTime() + "> " + message);}
}

export function debugOutput(message) {
    function debugOutput(message) {
        if (debugMode){
            serverOutput(message);
        }
    }
}



//This class and its functions are for logging output to the serverLog.txt
export class Logger {
    constructor(filePath, flushInterval = 1000) {
        this.filePath = filePath;
        this.flushInterval = flushInterval;
        this.logQueue = [];
        this.timer = setInterval(() => this.flushQueue(), this.flushInterval);

        if(!fs.existsSync(filePath)){
            serverOutput("ERROR : Log file " + filePath + " does not exist. Attempting to create...");
            fs.writeFile(filePath , ("Log file generated by bygone - "+getTime()));
        }
    }

    log(message) {
        this.logQueue.push(message);
    }

    flushQueue() {
        if (this.logQueue.length === 0) return;

        const messages = this.logQueue.join('\n') + '\n';
        fs.appendFile(this.filePath, messages, (err) => {
        if (err) {
            logMode=false;
            console.error('Error writing to log file:', err);
        } else {
            this.logQueue = [];
        }
        });
    }

    close() {
        clearInterval(this.timer);
        this.flushQueue();
    }
}  



//Brain is dead... no description
class cachedFile {
    constructor (filePath) {
        this.filePath = filePath;

        if(fs.existsSync(filePath)){
            this.updateCache()
        } else {
            serverOutput("ERROR : database file " + filePath + " does not exist. Attempting to create...");
            this.updateFile()
        }
    }

    updateFile(){
        try {
            // Convert the fileCache object to a JSON string
            const data = JSON.stringify(this.cache, null, 2);
            
            // Write the JSON string to the database.json file
            fs.writeFileSync(this.filePath, data);
            
            debugOutput('Database file updated successfully!');
        } catch (err) {
            serverOutput('!Error Writing to database file : ' , err);
        }
    }

    updateCache(){
        return new Promise ((resolve,reject) => {
            // Read the contents of the database.json file
            fs.readFile(this.filePath, (err, data) => {
                if (err) {
                    // If there's an error reading the file, send an error response
                    reject("Error reading file:", err);
                } else {
                    try {
                        // Parse the data as JSON
                        const jsonData = JSON.parse(data);
    
                        this.cache = jsonData;
    
                        resolve(jsonData);
    
                    } catch (parseError) {
                        // If there's an error parsing the JSON, send an error response
                        reject("Error parsing JSON:", parseError);
                    }
                }
            })
        })
    }
}



export function startBygone(logFilePath){
    serverOutput("Starting Bygone services... ");

    //Check for a config file
    if (fs.existsSync("./bygone_config.json")){
        //read and parse json and set apropriate values.
    }
    const logger = new Logger(logFilePath, 2000); //Filepath, flush interval    

}